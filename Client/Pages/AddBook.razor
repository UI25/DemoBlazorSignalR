@page "/addbook"


@inject NavigationManager NavigationManager
@inject IBookService BookService


<h2>Create Book</h2>
<hr />
<EditForm Model="@book" FormName="AddBook" OnValidSubmit="handleAddBook">
    <DataAnnotationsValidator />
    <InputText type="hidden" @bind="@book.Id" />
    <div class="form-group row mb-2">
        <label for="Name" class="col-md-2 col-form-label">Name</label>
        <div class="col-md-10">
        <InputText class="form-control" @bind-Value="@book.Name" />
        <ValidationMessage For="@(() => book.Name)" class="alert-danger" />
        </div>
    </div>
    <div class="form-group row mb-2">
        <label for="ISBN" class="col-md-2 col-form-label">ISBN</label>
        <div class="col-md-10">
        <InputText class="form-control" @bind-Value="@book.Isbn"  />
        <ValidationMessage For="@(() => book.Isbn)" class="alert-danger" />
        </div>
    </div>
    <div class="form-group row mb-2">
        <label for="Author" class="col-md-2 col-form-label">Author</label>
        <div class="col-md-10">
        <InputText class="form-control" @bind-Value="@book.Author" />
        <ValidationMessage For="@(() => book.Author)" class="alert-danger" />
        </div>
    </div>
    <div class="form-group row mb-2">
        <label for="Price" class="col-md-2 col-form-label">Price</label>
        <div class="col-md-10">
        <InputNumber class="form-control" @bind-Value="@book.Price" />
        <ValidationMessage For="@(() => book.Price)"/>
        </div>
    </div>
    <div class="row">
        <div class="col-md-12 text-right">
        <button type="submit" class="btn btn-primary">Save</button>
        <button type="button" class="btn btn-secondary" @onclick="@Cancel">Cancel</button>
        </div>
    </div>
</EditForm>

@code {
    private HubConnection hubConnection;

    [SupplyParameterFromForm(FormName = "AddBook")]
    Book book { get; set; } = new Book();

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/hubs/broadcasthub"))
            .Build();

        await hubConnection.StartAsync();
    }

    protected async Task handleAddBook()
    {
        book = await BookService.AddBook(this.book);
        if(book != null)
        {
            await hubConnection.SendAsync("SendMessage");
            NavigationManager.NavigateTo("/");
        }
       
    }

    Task SendMessage() => hubConnection.SendAsync("SendMessage");

    public bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }

    void Cancel()
    {
        NavigationManager.NavigateTo("/");
    }
}
