@page "/editbook/{id}"


@inject NavigationManager NavigationManager
@inject IBookService BookService

<h3>EditBook</h3>
<br/>
<div class="row">
    <EditForm Model="book"  FormName="EditBook" OnValidSubmit="handleEditBook">
        <DataAnnotationsValidator />
        <InputText type="hidden" @bind="@book.Id" />
        <div class="form-group row mb-2">
            <label for="Name" class="col-md-2 col-form-label">Name</label>
            <div class="col-md-10">
                <InputText class="form-control" @bind-Value="@book.Name"  />
                <ValidationMessage For="@(() => book.Name)" class="alert-danger" />
            </div>
        </div>
        <div class="form-group row mb-2">
            <label for="ISBN" class="col-md-2 col-form-label">ISBN</label>
            <div class="col-md-10">
                <InputText class="form-control" @bind-Value="@book.Isbn" />
                <ValidationMessage For="@(() => book.Isbn)" class="alert-danger" />
            </div>
        </div>
        <div class="form-group row mb-2">
            <label for="Author" class="col-md-2 col-form-label">Author</label>
            <div class="col-md-10">
                <InputText class="form-control" @bind-Value="@book.Author" />
                <ValidationMessage For="@(() => book.Author)" class="alert-danger" />
            </div>
        </div>
        <div class="form-group row mb-2">
            <label for="Price" class="col-md-2 col-form-label">Price</label>
            <div class="col-md-10">
                <InputNumber  class="form-control" @bind-Value="@book.Price" />
                <ValidationMessage For="@(() => book.Price)" />
            </div>
        </div>
        <div class="row">
            <div class="col-md-12 text-right">
            <button type="submit" class="btn btn-primary">Update</button>
            <button type="button" class="btn btn-secondary" @onclick="@Cancel">Cancel</button>
            </div>
        </div>
    </EditForm>
</div>

@code {
    [Parameter]
    public string id { get; set; }

    [SupplyParameterFromForm(FormName ="EditBook")]
    private Book book { get; set; }  

    private HubConnection hubConnection;


    protected override async Task OnInitializedAsync()
    {     
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("hubs/broadcasthub"))
            .Build();
        await hubConnection.StartAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        book = await BookService.GetBookById(id);
    }

    private async Task handleEditBook()
    {
        book = await BookService.UpdateBook(this.book);
        if(book != null)
        {
            if (IsConnected) await SendMessage();
            NavigationManager.NavigateTo("/");
        }
              
    }

    Task SendMessage() => hubConnection.SendAsync("SendMessage");
   
    private bool IsConnected =>
        hubConnection.State == HubConnectionState.Connected;

    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }

    void Cancel()
    {
        NavigationManager.NavigateTo("/");
    }


}
